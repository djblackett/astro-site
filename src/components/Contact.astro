---
import { socialArray } from '../config/siteLinks';
const links = socialArray;
// Resolve endpoint server-side to avoid using import.meta.env in an inline client script
const CONTACT_ENDPOINT = import.meta.env.PUBLIC_CONTACT_ENDPOINT || 'https://astro-contact-worker.your-domain.workers.dev/api/contact';
---

<section id="contact" class="site-container site-section" data-endpoint={CONTACT_ENDPOINT}>
  <div class="text-center px-2">
    <h2 class="text-3xl font-bold">Get in touch</h2>
    <p class="mt-2 opacity-80">Have a question or want to work together? I'd love to hear from you.</p>
  </div>

  <div class="mt-8 grid grid-cols-1 sm:flex sm:flex-wrap justify-center gap-3 px-2">
    {links.map((l) => (
      l.icon === 'email' ? (
        <button
          type="button"
          class={`btn ${l.style} w-full sm:w-auto`}
          data-email-link
          aria-controls="contact-form-wrapper"
          aria-expanded="false"
        >
          <svg class="w-4 h-4" viewBox="0 0 24 24" fill="currentColor" aria-hidden="true">
            <path d="M20 4H4a2 2 0 0 0-2 2v12a2 2 0 0 0 2 2h16a2 2 0 0 0 2-2V6a2 2 0 0 0-2-2Zm0 4-8 5L4 8V6l8 5 8-5v2Z" />
          </svg>
          <span>{l.name}</span>
        </button>
      ) : (
        <a
          class={`btn ${l.style} w-full sm:w-auto`}
          href={l.href}
          target={l.href.startsWith('http') ? '_blank' : undefined}
          rel={l.href.startsWith('http') ? 'noopener noreferrer' : undefined}
        >
          <svg class="w-4 h-4" viewBox="0 0 24 24" fill="currentColor" aria-hidden="true">
            {l.icon === 'github' && <path d="M12 .5a12 12 0 0 0-3.79 23.4c.6.11.82-.26.82-.58v-2.02c-3.34.73-4.04-1.61-4.04-1.61-.55-1.39-1.34-1.76-1.34-1.76-1.09-.75.08-.73.08-.73 1.2.09 1.83 1.23 1.83 1.23 1.07 1.83 2.8 1.3 3.49.99.11-.78.42-1.3.76-1.6-2.67-.3-5.47-1.34-5.47-5.95 0-1.31.47-2.38 1.23-3.22-.12-.3-.53-1.52.12-3.16 0 0 1.01-.32 3.3 1.23a11.4 11.4 0 0 1 6 0c2.3-1.55 3.3-1.23 3.3-1.23.65 1.64.24 2.86.12 3.16.77.84 1.23 1.9 1.23 3.22 0 4.62-2.8 5.65-5.48 5.95.43.37.81 1.1.81 2.23v3.3c0 .32.21 .69.82 .58A12 12 0 0 0 12 .5Z" />}
            {l.icon === 'linkedin' && <path d="M4.98 3.5a2.5 2.5 0 1 0 0 5.001 2.5 2.5 0 0 0 0-5ZM3 9h4v12H3V9Zm7 0h3.8v1.64h.05c.53-1 1.83-2.05 3.77-2.05 4.03 0 4.77 2.65 4.77 6.1V21h-4v-5.36c0-1.28-.02-2.92-1.78-2.92-1.78 0-2.06 1.39-2.06 2.83V21H10V9Z" />}
            {l.icon === 'twitter' && <path d="M22.46 6c-.77.35-1.6.58-2.46.69a4.28 4.28 0 0 0 1.88-2.37 8.61 8.61 0 0 1-2.72 1.04A4.26 4.26 0 0 0 11.07 9a12.08 12.08 0 0 1-8.77-4.45 4.26 4.26 0 0 0 1.32 5.68c-.66-.02-1.28-.2-1.82-.5v.05a4.26 4.26 0 0 0 3.42 4.17c-.31.08-.63.12-.96.12-.24 0-.47-.02-.7-.07a4.26 4.26 0 0 0 3.98 2.96A8.54 8.54 0 0 1 2 19.54 12.06 12.06 0 0 0 8.29 21c7.55 0 11.68-6.26 11.68-11.68l-.01-.53A8.35 8.35 0 0 0 22.46 6Z" />}
          </svg>
          <span>{l.name}</span>
        </a>
      )
    ))}
  </div>

  <!-- Hidden form wrapper revealed on Email click -->
  <div id="contact-form-wrapper" class="mt-10 mx-auto max-w-xl hidden transition-all duration-300 overflow-hidden">
    <form id="contact-form" class="space-y-4" novalidate>
      <div class="form-control">
        <label class="label" for="name"><span class="label-text">Name</span></label>
        <input id="name" name="name" type="text" class="input input-bordered" required minlength="2" />
      </div>
      <div class="form-control">
        <label class="label" for="email"><span class="label-text">Email</span></label>
        <input id="email" name="email" type="email" class="input input-bordered" required />
      </div>
      <div class="form-control">
        <label class="label" for="message"><span class="label-text">Message</span></label>
        <textarea id="message" name="message" class="textarea textarea-bordered h-40" required maxlength="5000"></textarea>
        <label class="label"><span class="label-text-alt" id="char-counter">0 / 5000</span></label>
      </div>
      <div class="form-control">
        <div id="cf-turnstile" class="cf-turnstile" data-sitekey="YOUR_TURNSTILE_SITE_KEY" data-theme="auto"></div>
      </div>
      <div class="form-control">
        <button type="submit" class="btn btn-primary w-full" id="submit-btn">
          <span class="inline-flex items-center gap-2"><span id="submit-text">Send message</span>
            <span id="spinner" class="loading loading-spinner loading-sm hidden"></span>
          </span>
        </button>
      </div>
      <div id="form-status" class="text-sm"></div>
      <p class="text-xs opacity-70">Prefer your own client? <a class="link" href="mailto:you@example.com">Open email app</a>.</p>
    </form>
  </div>
  <script is:inline>
    (function() {
      const doc = document;
      const section = doc.getElementById('contact');
      if (!section) return;

      const emailBtn = section.querySelector('[data-email-link]');
      const formWrapper = doc.getElementById('contact-form-wrapper');
      const backToTopBtn = section.querySelector('#back-to-top');
      const endpoint = section.dataset.endpoint || 'https://astro-contact-worker.your-domain.workers.dev/api/contact';
      const hiddenClass = 'hidden';

      const safeStorage = {
        get(key) {
          try {
            return window.localStorage.getItem(key);
          } catch (error) {
            return null;
          }
        },
        set(key, value) {
          try {
            window.localStorage.setItem(key, value);
          } catch (error) {
            /* storage might be disabled */
          }
        },
        remove(key) {
          try {
            window.localStorage.removeItem(key);
          } catch (error) {
            /* storage might be disabled */
          }
        }
      };

      let initialized = false;
      let form;
      let statusEl;
      let submitBtn;
      let spinner;
      let messageEl;
      let counter;

      function getToastRoot() {
        let root = doc.getElementById('toast-root');
        if (!root) {
          root = doc.createElement('div');
          root.id = 'toast-root';
          root.style.position = 'fixed';
          root.style.top = '1rem';
          root.style.right = '1rem';
          root.style.display = 'flex';
          root.style.flexDirection = 'column';
          root.style.gap = '0.5rem';
          root.style.zIndex = '1000';
          doc.body.appendChild(root);
        }
        return root;
      }

      function showToast(message, variant) {
        const root = getToastRoot();
        const toast = doc.createElement('div');
        toast.className = `alert ${variant === 'error' ? 'alert-error' : 'alert-success'} shadow-lg`;
        toast.textContent = message;
        root.appendChild(toast);
        window.setTimeout(() => {
          toast.style.transition = 'opacity 250ms ease';
          toast.style.opacity = '0';
          toast.addEventListener('transitionend', () => {
            toast.remove();
            if (!root.childElementCount) {
              root.remove();
            }
          }, { once: true });
        }, 3200);
      }

      function ensureInit() {
        if (initialized) return;
        initialized = true;

        form = doc.getElementById('contact-form');
        statusEl = doc.getElementById('form-status');
        submitBtn = doc.getElementById('submit-btn');
        spinner = doc.getElementById('spinner');
        messageEl = doc.getElementById('message');
        counter = doc.getElementById('char-counter');

        if (messageEl && counter) {
          counter.textContent = `${messageEl.value.length} / 5000`;
          messageEl.addEventListener('input', () => {
            counter.textContent = `${messageEl.value.length} / 5000`;
          });
        }

        if (form) {
          form.addEventListener('submit', async (event) => {
            event.preventDefault();
            if (!submitBtn || !spinner || !statusEl) return;
            statusEl.textContent = '';
            submitBtn.disabled = true;
            spinner.classList.remove(hiddenClass);
            try {
              const formData = new FormData(form);
              const payload = Object.fromEntries(formData.entries());
              const tokenField = form.querySelector('input[name="cf-turnstile-response"]');
              const turnstileToken = tokenField ? tokenField.value : undefined;
              const response = await fetch(endpoint, {
                method: 'POST',
                headers: { 'content-type': 'application/json' },
                body: JSON.stringify({
                  name: payload.name,
                  email: payload.email,
                  message: payload.message,
                  turnstileToken
                })
              });
              const data = await response.json();
              if (!response.ok) {
                statusEl.className = 'text-sm text-error';
                statusEl.textContent = data.error || 'Failed to send.';
                showToast('Something went wrong. Please retry or email directly.', 'error');
              } else {
                statusEl.className = 'text-sm text-success';
                statusEl.textContent = 'Message sent successfully!';
                form.reset();
                if (counter) counter.textContent = '0 / 5000';
                if (window.turnstile) window.turnstile.reset();
                showToast('Thanks! Your message was sent.', 'success');
              }
            } catch (error) {
              statusEl.className = 'text-sm text-error';
              statusEl.textContent = 'Unexpected error. Please retry or email me instead.';
              showToast('Unable to send right now. Try again or use email.', 'error');
            } finally {
              submitBtn.disabled = false;
              spinner.classList.add(hiddenClass);
            }
          });
        }
      }

      function instantShow() {
        if (!formWrapper) return;
        ensureInit();
        formWrapper.classList.remove(hiddenClass);
        formWrapper.classList.remove('overflow-hidden');
        formWrapper.style.height = '';
        formWrapper.style.opacity = '1';
        safeStorage.set('contactFormExpanded', '1');
      }

      function expand(scrollIntoView) {
        if (!formWrapper || !formWrapper.classList.contains(hiddenClass)) return;
        ensureInit();
        formWrapper.classList.remove(hiddenClass);
        formWrapper.classList.add('overflow-hidden');
        formWrapper.style.height = '0px';
        formWrapper.style.opacity = '0';
        requestAnimationFrame(() => {
          const full = formWrapper.scrollHeight;
          formWrapper.style.height = full + 'px';
          formWrapper.style.opacity = '1';
        });
        formWrapper.addEventListener('transitionend', function handler(event) {
          if (event.propertyName !== 'height') return;
          formWrapper.classList.remove('overflow-hidden');
          formWrapper.style.height = '';
          formWrapper.removeEventListener('transitionend', handler);
          const nameInput = doc.getElementById('name');
          if (nameInput) nameInput.focus();
        }, { once: true });
        if (scrollIntoView) {
          formWrapper.scrollIntoView({ behavior: 'smooth', block: 'start' });
        }
        safeStorage.set('contactFormExpanded', '1');
      }

      function collapse() {
        if (!formWrapper || formWrapper.classList.contains(hiddenClass)) return;
        formWrapper.classList.add('overflow-hidden');
        const full = formWrapper.scrollHeight;
        formWrapper.style.height = full + 'px';
        formWrapper.style.opacity = '1';
        requestAnimationFrame(() => {
          formWrapper.style.height = '0px';
          formWrapper.style.opacity = '0';
        });
        formWrapper.addEventListener('transitionend', function handler(event) {
          if (event.propertyName !== 'height') return;
          formWrapper.classList.add(hiddenClass);
          formWrapper.classList.remove('overflow-hidden');
          formWrapper.style.height = '';
          formWrapper.removeEventListener('transitionend', handler);
        }, { once: true });
        safeStorage.remove('contactFormExpanded');
      }

      if (emailBtn) {
        emailBtn.addEventListener('click', (event) => {
          event.preventDefault();
          const expanded = emailBtn.getAttribute('aria-expanded') === 'true';
          if (expanded) {
            emailBtn.setAttribute('aria-expanded', 'false');
            collapse();
          } else {
            emailBtn.setAttribute('aria-expanded', 'true');
            expand(true);
          }
        });
      }

      if (safeStorage.get('contactFormExpanded') === '1') {
        if (emailBtn) emailBtn.setAttribute('aria-expanded', 'true');
        instantShow();
      }

      if (backToTopBtn) {
        backToTopBtn.addEventListener('click', (event) => {
          event.preventDefault();
          window.scrollTo({ top: 0, behavior: 'smooth' });
          if (location.hash) {
            history.replaceState('', document.title, window.location.pathname + window.location.search);
          }
        });
      }

      if ('requestIdleCallback' in window) {
        window.requestIdleCallback(() => ensureInit(), { timeout: 2000 });
      } else {
        window.setTimeout(() => ensureInit(), 1000);
      }
    })();
  </script>
  <script async defer src="https://challenges.cloudflare.com/turnstile/v0/api.js"></script>

  <div class="mt-10 mx-auto max-w-2xl">
    <div class="alert bg-base-200">
      <span class="opacity-80">Prefer email? I typically respond within 1–2 business days.</span>
    </div>
  </div>

  <!-- Back to top button -->
  <div class="mt-6 flex justify-center px-2">
    <button id="back-to-top" type="button" class="btn btn-outline w-full sm:w-auto" aria-label="Back to top">
      Back to top
    </button>
  </div>
</section>
