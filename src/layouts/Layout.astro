---
import "../styles/global.css";
import "../assets/app.css";
import Toolbar from "../components/Toolbar.astro";
import Footer from "../components/Footer.astro";
import { withBase } from "../utils/url";

const {
	title = 'Dave Andrea - Software Engineer',
	description = 'A modern Astro site with a blog and more.',
	ogImage = '/favicon.svg',
	canonical = undefined,
	showMobileThemeToolbar = true,
} = Astro.props;

const origin = (Astro.site ?? Astro.url).origin;
const resolvedOgImage = ogImage.startsWith('http') ? ogImage : `${origin}${withBase(ogImage)}`;
---


<html lang="en" data-theme="light" data-theme-initializing>
	<head>
		<style is:inline>
			html[data-theme-initializing] body {
				visibility: hidden;
			}
			html[data-theme-initializing] {
				background-color: #000;
			}
		</style>
		<script is:inline>
			// Prevent FART effect: set theme before rendering
			(function() {
				var root = document.documentElement;
				var prefersDark = false;
				try {
					prefersDark = window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches;
				} catch (error) {
					prefersDark = false;
				}
				var theme = prefersDark ? 'dark' : 'light';
				try {
					var stored = window.localStorage.getItem('theme');
					if (stored) {
						theme = stored;
					}
				} catch (error) {
					// Ignore storage access errors
				}
				root.setAttribute('data-theme', theme);
				root.style.setProperty('color-scheme', theme === 'dark' ? 'dark' : 'light');
				root.removeAttribute('data-theme-initializing');
			})();
		</script>
		<script is:inline>
			// Sync theme radios and persist selection across navigations
			(function() {
				var storageKey = 'theme';
				function applyTheme(theme) {
					if (!theme) return;
					try {
						window.localStorage.setItem(storageKey, theme);
					} catch (error) {
						// Ignore storage write errors
					}
					document.documentElement.setAttribute('data-theme', theme);
					var inputs = document.querySelectorAll('input.theme-controller[name="theme-dropdown"]');
					inputs.forEach(function(input) { input.checked = (input.value === theme); });
				}

				function initThemeControls() {
					var current = 'light';
					try {
						var stored = window.localStorage.getItem(storageKey);
						if (stored) {
							current = stored;
						} else if (window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches) {
							current = 'dark';
						}
					} catch (error) {
						if (window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches) {
							current = 'dark';
						}
					}
					applyTheme(current);
					var inputs = document.querySelectorAll('input.theme-controller[name="theme-dropdown"]');
					inputs.forEach(function(input) {
						input.addEventListener('change', function(ev) {
							var target = ev.target;
							if (target && target.value) {
								applyTheme(target.value);
							}
						});
					});
				}

				if (document.readyState === 'loading') {
					document.addEventListener('DOMContentLoaded', initThemeControls);
				} else {
					initThemeControls();
				}
			})();
		</script>
		<meta charset="utf-8" />
		<meta name="viewport" content="width=device-width, initial-scale=1" />
		<title>{title}</title>
		<meta property="og:description" content={description} />
		<meta property="og:type" content="website" />
		<meta property="og:url" content={canonical ?? Astro.url?.href ?? '/'} />
		<meta property="og:image" content={resolvedOgImage} />
		<meta name="twitter:card" content="summary_large_image" />
		<meta name="twitter:title" content={title} />
		<meta name="twitter:description" content={description} />
		<meta name="twitter:image" content={resolvedOgImage} />
	</head>
	<body>
		<!-- Mobile theme toolbar (hidden on sm and up); can be disabled via prop -->
		{showMobileThemeToolbar && (
			<div class="fixed right-2 top-2 z-50 sm:hidden">
				<Toolbar />
			</div>
		)}

		<slot />
		<Footer />
		<style>
			html,
			body {
				margin: 0;
				width: 100%;
				height: 100%;
			}
		</style>
	</body>
</html>
