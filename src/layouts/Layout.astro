---
import "../styles/global.css";
import "../assets/app.css";
import Toolbar from "../components/Toolbar.astro";
import Footer from "../components/Footer.astro";
import { withBase } from "../utils/url";

const {
	title = 'Dave Andrea - Software Engineer',
	description = 'A modern Astro site with a blog and more.',
	ogImage = '/favicon.svg',
	canonical = undefined,
} = Astro.props;

const origin = (Astro.site ?? Astro.url).origin;
const resolvedOgImage = ogImage.startsWith('http') ? ogImage : `${origin}${withBase(ogImage)}`;
---


<html lang="en" data-theme="light" data-theme-initializing>
	<head>
		<style is:inline>
			html[data-theme-initializing] body {
				visibility: hidden;
			}
			html[data-theme-initializing] {
				background-color: #000;
			}
		</style>
		<script is:inline>
			// Prevent FART effect: set theme before rendering
			(function() {
				var root = document.documentElement;
				var prefersDark = false;
				try {
					prefersDark = window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches;
				} catch (error) {
					prefersDark = false;
				}
				var theme = prefersDark ? 'dark' : 'light';
				try {
					var stored = window.localStorage.getItem('theme');
					if (stored) {
						theme = stored;
					}
				} catch (error) {
					// Ignore storage access errors
				}
				root.setAttribute('data-theme', theme);
				root.style.setProperty('color-scheme', theme === 'dark' ? 'dark' : 'light');
				root.removeAttribute('data-theme-initializing');
			})();
		</script>
		<script is:inline>
			// Sync theme radios and persist selection across navigations with minimal listeners
			(function() {
				var storageKey = 'theme';
				var radioSelector = 'input.theme-controller[name="theme-dropdown"]';
				var root = document.documentElement;
				var currentTheme = root.getAttribute('data-theme') || 'light';

				function syncRadios(theme) {
					var inputs = document.querySelectorAll(radioSelector);
					inputs.forEach(function(input) {
						input.checked = (input.value === theme);
					});
				}

				function setTheme(theme, options) {
					if (!theme || theme === currentTheme) return;
					if (!options || !options.skipStore) {
						try {
							window.localStorage.setItem(storageKey, theme);
						} catch (error) {
							// Storage may be unavailable; ignore.
						}
					}
					currentTheme = theme;
					root.setAttribute('data-theme', theme);
					root.style.setProperty('color-scheme', theme === 'dark' ? 'dark' : 'light');
					if (!options || !options.skipSync) {
						syncRadios(theme);
					}
				}

				function resolvePreferredTheme() {
					try {
						var stored = window.localStorage.getItem(storageKey);
						if (stored) return stored;
					} catch (error) {
						// Ignore storage read issues.
					}
					if (window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches) {
						return 'dark';
					}
					return 'light';
				}

				function handleChange(event) {
					var target = event.target;
					if (!(target instanceof HTMLInputElement)) return;
					if (!target.matches(radioSelector) || !target.value) return;
					setTheme(target.value);
				}

				function handleStorage(event) {
					if (event.key !== storageKey || !event.newValue) return;
					setTheme(event.newValue, { skipStore: true });
				}

				function initThemeControls() {
					var preferred = resolvePreferredTheme();
					setTheme(preferred, { skipStore: true, skipSync: true });
					syncRadios(preferred);
					document.addEventListener('change', handleChange, { passive: true });
					window.addEventListener('storage', handleStorage);
				}

				if (document.readyState === 'loading') {
					document.addEventListener('DOMContentLoaded', initThemeControls, { once: true });
				} else {
					initThemeControls();
				}
			})();
		</script>
		<meta charset="utf-8" />
		<meta name="viewport" content="width=device-width, initial-scale=1" />
		<title>{title}</title>
		<meta property="og:description" content={description} />
		<meta property="og:type" content="website" />
		<meta property="og:url" content={canonical ?? Astro.url?.href ?? '/'} />
		<meta property="og:image" content={resolvedOgImage} />
		<meta name="twitter:card" content="summary_large_image" />
		<meta name="twitter:title" content={title} />
		<meta name="twitter:description" content={description} />
		<meta name="twitter:image" content={resolvedOgImage} />
	</head>
	<body class="min-h-screen flex flex-col">
		<header class="sticky top-0 z-40 border-b border-base-300/60 bg-base-100/80 backdrop-blur supports-[backdrop-filter]:bg-base-100/60">
			<div class="site-container flex flex-col gap-3 py-3 sm:flex-row sm:items-center sm:justify-between">
				<div class="flex items-center justify-between gap-4">
					<a href={withBase('')} class="font-semibold tracking-tight text-lg text-base-content">
						Dave Andrea
					</a>
					<div class="sm:hidden">
						<Toolbar />
					</div>
				</div>
				<div class="flex flex-col gap-3 sm:flex-row sm:items-center sm:gap-6">
					<nav class="flex flex-wrap items-center justify-center gap-4 text-sm font-medium text-base-content opacity-80 sm:justify-end">
						<a class="hover:text-base-content hover:opacity-100 transition" href={withBase('#about')}>About</a>
						<a class="hover:text-base-content hover:opacity-100 transition" href={withBase('blog')}>Blog</a>
						<a class="hover:text-base-content hover:opacity-100 transition" href={withBase('#contact')}>Contact</a>
					</nav>
					<div class="hidden sm:block">
						<Toolbar />
					</div>
				</div>
			</div>
		</header>

		<div class="flex flex-col flex-1">
			<div class="flex-1 flex flex-col">
				<slot />
			</div>
			<Footer />
		</div>
		<style>
			html,
			body {
				margin: 0;
				width: 100%;
				height: 100%;
			}
		</style>
	</body>
</html>
