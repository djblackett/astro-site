---
import { getCollection, type CollectionEntry } from 'astro:content';
import { withBase } from '../../utils/url';
export async function getStaticPaths() {
  const posts = (await getCollection('blog')) as CollectionEntry<'blog'>[];
  return posts.map((p) => ({ params: { slug: p.slug } }));
}
import Layout from '../../layouts/Layout.astro';
import Toolbar from '../../components/Toolbar.astro';

const { slug } = Astro.params;
const posts = (await getCollection('blog')) as CollectionEntry<'blog'>[];
const s = Array.isArray(slug) ? slug.join('/') : (slug as string);
const entry = posts.find((p) => p.slug === s);
if (!entry) return Astro.redirect(withBase('blog'));
const { Content } = await entry.render();
const { data } = entry;
const rawBody = entry.body ?? '';
const siteOrigin = (Astro.site ?? Astro.url).origin;
const articleUrl = `${siteOrigin}${withBase(`blog/${entry.slug}`)}`;
// Estimate reading time (~200 wpm)
const words = rawBody.split(/\s+/).filter(Boolean).length;
const minutes = Math.max(1, Math.round(words / 200));
// Extract h1–h4 headings for ToC (basic regex on raw body markdown)
const headingMatches = Array.from(
  rawBody.matchAll(/^#\s+(.+)|^##\s+(.+)|^###\s+(.+)|^####\s+(.+)/gm)
);
const slugCounts = new Map<string, number>();
const toc = headingMatches
  .map((m, index) => {
    const level = m[0].startsWith('####')
      ? 4
      : m[0].startsWith('###')
        ? 3
        : m[0].startsWith('##')
          ? 2
          : 1;
    const text = (m[1] || m[2] || m[3] || m[4] || '').trim();
    const baseSlug = text
      .toLowerCase()
      .replace(/[^a-z0-9\s-]/g, '')
      .trim()
      .replace(/\s+/g, '-');
    const fallback = baseSlug || `section-${index + 1}`;
    const seen = slugCounts.get(fallback) ?? 0;
    slugCounts.set(fallback, seen + 1);
    const slugId = seen === 0 ? fallback : `${fallback}-${seen}`;
    return text ? { level, text, slugId } : undefined;
  })
  .filter((entry): entry is { level: number; text: string; slugId: string } => Boolean(entry?.slugId));
// Determine previous/next posts by pubDate (excluding drafts)
const sorted = posts
  .filter((p) => !p.data.draft)
  .sort((a, b) => +new Date(a.data.pubDate) - +new Date(b.data.pubDate));
const idx = sorted.findIndex(p => p.slug === entry.slug);
const previous = idx > 0 ? sorted[idx - 1] : null;
const next = idx < sorted.length - 1 ? sorted[idx + 1] : null;
---

<Layout
  title={data.title}
  description={data.description ?? ''}
  canonical={articleUrl}
  ogImage={'/favicon.svg'}
  showMobileThemeToolbar={false}
>
  <div class="hidden sm:block fixed right-2 top-2 z-50">
    <Toolbar />
  </div>
  <div class="site-section px-container bg-base-100/90 min-h-[100vh]">
    <div class="mx-auto max-w-6xl lg:grid lg:grid-cols-[1fr_minmax(0,720px)_260px] lg:gap-10">
      <div class="breadcrumbs text-sm mb-8 lg:col-span-3">
        <ul>
          <li><a href={withBase('/')}>Home</a></li>
          <li><a href={withBase('blog')}>Blog</a></li>
          <li>{data.title}</li>
        </ul>
      </div>
      <article class="rounded-3xl shadow-2xl bg-base-200/90 ring-1 ring-base-300/40 overflow-hidden lg:col-start-2">
        <div class="p-0 md:p-0">
          <header class="not-prose px-6 pt-8 pb-4 md:px-12 md:pt-12 md:pb-6 border-b border-base-300/40">
            <div class="sm:hidden mb-3">
              <Toolbar />
            </div>
            <h1 class="text-4xl md:text-5xl font-extrabold leading-tight mb-2 text-balance">{data.title}</h1>
            {data.description && <p class="text-lg md:text-xl opacity-80 font-medium leading-snug mb-3 max-w-prose">{data.description}</p>}
            <div class="flex flex-wrap gap-4 items-center text-sm opacity-80 mb-2">
              {data.pubDate && (
                <time datetime={new Date(data.pubDate).toISOString()} class="inline-flex items-center gap-1">
                  {new Date(data.pubDate).toLocaleDateString(undefined, { year: 'numeric', month: 'long', day: 'numeric' })}
                </time>
              )}
              <span aria-label="Estimated reading time" class="inline-flex items-center gap-1">• {minutes} min read</span>
              {data.updatedDate && (
                <span class="inline-flex items-center gap-1">• Updated {new Date(data.updatedDate).toLocaleDateString(undefined, { year: 'numeric', month: 'short', day: 'numeric' })}</span>
              )}
            </div>
            {data.tags?.length ? (
              <div class="mt-2 flex flex-wrap gap-2 not-prose">
                {data.tags.map((t: string) => (
                  <span class="badge badge-outline badge-md px-3 py-1.5 font-semibold tracking-wide" style="text-transform: none;">{t}</span>
                ))}
              </div>
            ) : null}
          </header>
          {toc.length >= 1 && (
            <div class="not-prose lg:hidden mb-6">
              <details class="dropdown w-full">
                <summary class="btn btn-sm w-full justify-between">
                  On this page
                  <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor" class="w-4 h-4 opacity-70"><path fill-rule="evenodd" d="M12.53 16.28a.75.75 0 01-1.06 0l-6-6a.75.75 0 011.06-1.06L12 14.69l5.47-5.47a.75.75 0 111.06 1.06l-6 6z" clip-rule="evenodd" /></svg>
                </summary>
                <ul class="menu menu-sm bg-base-200 w-full mt-2 rounded-box shadow dropdown-content">
                  {toc.map(h => (
                    <li>
                      <a href={`#${h.slugId}`} class={h.level === 1 ? 'font-semibold' : h.level === 2 ? '' : 'pl-4'}>{h.text}</a>
                    </li>
                  ))}
                </ul>
              </details>
            </div>
          )}
          <div
            class="prose max-w-none px-6 md:px-12 py-8 md:py-12"
            id="post-content"
            data-toc={JSON.stringify(toc)}
          >
            <Content />
          </div>
          <section class="mt-8 not-prose px-6 md:px-12 pb-10">
            <div class="flex flex-col gap-6">
              <div class="flex flex-wrap gap-3 items-center">
                <span class="text-sm font-medium opacity-80">Share:</span>
                <button class="btn btn-xs btn-outline" id="copy-link" data-url={articleUrl}>Copy Link</button>
                <a class="btn btn-xs btn-outline" target="_blank" rel="noopener noreferrer" href={`https://twitter.com/intent/tweet?text=${encodeURIComponent(data.title)}&url=${encodeURIComponent(articleUrl)}`}>Twitter</a>
                <a class="btn btn-xs btn-outline" target="_blank" rel="noopener noreferrer" href={`https://www.linkedin.com/sharing/share-offsite/?url=${encodeURIComponent(articleUrl)}`}>LinkedIn</a>
              </div>
              <div class="grid gap-4 md:grid-cols-2">
                {previous && (
                  <a href={withBase(`blog/${previous.slug}`)} class="group p-4 rounded-lg border border-base-300/60 bg-base-300/30 hover:bg-base-300/60 transition">
                    <div class="text-xs opacity-70 mb-1">Previous</div>
                    <div class="font-medium group-hover:text-primary line-clamp-2">{previous.data.title}</div>
                  </a>
                )}
                {next && (
                  <a href={withBase(`blog/${next.slug}`)} class="group p-4 rounded-lg border border-base-300/60 bg-base-300/30 hover:bg-base-300/60 transition md:text-right">
                    <div class="text-xs opacity-70 mb-1">Next</div>
                    <div class="font-medium group-hover:text-primary line-clamp-2">{next.data.title}</div>
                  </a>
                )}
              </div>
              <div class="flex justify-between items-center mt-2">
                <div class="text-sm opacity-70">Thanks for reading.</div>
                <a href={withBase('blog')} class="btn btn-sm btn-primary">← All posts</a>
              </div>
            </div>
          </section>
        </div>
      </article>
      {toc.length >= 1 && (
        <aside class="toc hidden lg:block lg:col-start-3 text-sm sticky top-28 h-max">
          <div class="mb-3 font-semibold tracking-wide uppercase opacity-70">On this page</div>
          <ul class="space-y-1">
            {toc.map(h => (
              <li class={h.level === 3 ? 'pl-3 border-l border-base-300/60 ml-1' : ''}>
                <a href={`#${h.slugId}`} class="transition-colors line-clamp-2" >{h.text}</a>
              </li>
            ))}
          </ul>
        </aside>
      )}
          <script>
            // Copy link button with clipboard API + graceful fallback
            const copyButton = document.getElementById('copy-link');
            if (copyButton) {
              copyButton.addEventListener('click', async () => {
                const url = copyButton.getAttribute('data-url');
                if (!url) return;

                const reset = () => {
                  copyButton.classList.remove('btn-success', 'btn-error');
                  copyButton.textContent = 'Copy Link';
                };

                try {
                  if (navigator.clipboard?.writeText) {
                    await navigator.clipboard.writeText(url);
                  } else {
                    const fallback = window.prompt('Copy this link', url);
                    if (fallback === null) {
                      reset();
                      return;
                    }
                  }

                  copyButton.classList.add('btn-success');
                  copyButton.textContent = 'Copied!';
                } catch (error) {
                  console.error('Failed to copy link', error);
                  copyButton.classList.add('btn-error');
                  copyButton.textContent = 'Failed to copy';
                } finally {
                  setTimeout(reset, 2200);
                }
              });
            }

            // Helpers for slug/ToC management
            const slugify = (value: string | undefined | null): string =>
              (value || '')
                .toLowerCase()
                .replace(/[^a-z0-9\s-]/g, '')
                .trim()
                .replace(/\s+/g, '-');

            const contentEl = document.getElementById('post-content');
            const headings = contentEl
              ? Array.from(contentEl.querySelectorAll<HTMLHeadingElement>('h1, h2, h3, h4'))
              : [];

            type TocItem = { level: number; text: string; slugId: string };
            let tocData: TocItem[] = [];
            if (contentEl?.dataset.toc) {
              try {
                tocData = JSON.parse(contentEl.dataset.toc) as TocItem[];
              } catch (error) {
                console.warn('Unable to parse ToC data', error);
              }
              contentEl.removeAttribute('data-toc');
            }

            if (tocData.length && headings.length) {
              tocData.forEach((entry, index) => {
                const heading = headings[index];
                if (!heading) return;
                const slug = entry.slugId || slugify(heading.textContent || '') || `section-${index + 1}`;
                if (!heading.id) {
                  heading.id = slug;
                }
              });
            }

            const applyAnchors = (anchors: HTMLAnchorElement[]) => {
              anchors.forEach((anchor, index) => {
                const entry = tocData[index];
                const heading = headings[index];
                if (!anchor || !entry || !heading || !heading.id) return;
                anchor.setAttribute('href', `#${heading.id}`);
                (anchor as HTMLAnchorElement).dataset.slug = heading.id;
              });
            };

            applyAnchors(Array.from(document.querySelectorAll<HTMLAnchorElement>('aside.toc a')));
            applyAnchors(Array.from(document.querySelectorAll<HTMLAnchorElement>('details.dropdown ul a')));

            headings.forEach((heading, index) => {
              if (!heading.id) {
                heading.id = slugify(heading.textContent || '') || `section-${index + 1}`;
              }
              if (heading.querySelector('.heading-anchor')) return;
              const link = document.createElement('a');
              link.className = 'heading-anchor';
              link.href = `#${heading.id}`;
              link.setAttribute('aria-label', `Permalink to ${heading.textContent || ''}`);
              link.textContent = '¶';
              heading.appendChild(link);
            });

            const allTocAnchors = Array.from(
              document.querySelectorAll<HTMLAnchorElement>('aside.toc a[data-slug], details.dropdown ul a[data-slug]')
            );
            const setActive = (id: string) => {
              if (!id) return;
              allTocAnchors.forEach((anchor) => {
                const datasetSlug = (anchor as HTMLAnchorElement).dataset.slug;
                anchor.classList.toggle('is-active', datasetSlug === id);
              });
            };

            if (headings[0]?.id) {
              setActive(headings[0].id);
            }

            if ('IntersectionObserver' in window && headings.length) {
              const observer = new IntersectionObserver(
                (entries) => {
                  entries.forEach((entry) => {
                    if (entry.isIntersecting) {
                      setActive(entry.target.id);
                    }
                  });
                },
                { rootMargin: '0px 0px -70% 0px', threshold: [0, 1] }
              );
              headings.forEach((heading) => observer.observe(heading));
            } else if (headings.length) {
              const onScroll = () => {
                const offset = window.scrollY + 120;
                let currentId = headings[0]?.id || '';
                headings.forEach((heading) => {
                  const top = heading.getBoundingClientRect().top + window.scrollY;
                  if (top <= offset && heading.id) {
                    currentId = heading.id;
                  }
                });
                if (currentId) {
                  setActive(currentId);
                }
              };
              window.addEventListener('scroll', onScroll, { passive: true });
              onScroll();
            }
          </script>
